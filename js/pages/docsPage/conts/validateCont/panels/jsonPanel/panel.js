!function(){return function e(t,a,n){function i(s,o){if(!a[s]){if(!t[s]){var p="function"==typeof require&&require;if(!o&&p)return p(s,!0);if(r)return r(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var m=a[s]={exports:{}};t[s][0].call(m.exports,function(e){return i(t[s][1][e]||e)},m,m.exports,e,t,a,n)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)i(n[s]);return i}}()({1:[function(e,t,a){t.exports=[{type:"section",title:"Vegana Validation Apis",items:[{type:"para",string:"Json validate api simply validates a json object with a given schema and takes schema object, json object, data size limits as a string and data size as max number of keys the data should hold"}]},{type:"section",title:"schema",items:[{type:"para",string:"Schema is a json object which defined how should the data be validated and takes the data key to be validated as key for Schema and an object as a value which defined the value validation parameter"},{type:"para",string:"Schema is a json object which defined how should the data be validated and takes the data key to be validated as key for Schema and an object as a value which defined the value validation parameter"},{type:"code",json:{username:{type:"string",min:3,max:256},user_type:{type:"string",options:["admin","writer","programmer"]},age:{type:"number",min:12,max:99},mobile:{type:"number",min:4500450045,max:9998999899},likes:{type:"array",min:1,max:10,elective:!0},contacts:{type:"object",min:1,max:3}}},{type:"para",string:"in the given example object key represents the key of the data which is to be present in the data and the value represents the validation parameter"},{type:"title",level:3,string:"validation parameteres includes type,min,max,options and elective as keys and are used to validate the data."},{type:"title",level:2,string:"(1) type validation parameter"},{type:"list",items:["string","number","object","email","array"]},{type:"para",string:"type param takes the given options as a value and check the data type of be the exact same for the given value in data to be validated"},{type:"title",level:2,string:"(2) Min validation parameter"},{type:"para",string:"min parameter check the string,array,number or object keys length to be equal or higher to the number given as a value to this parameter in the schema to be the same of that given in the data to be validated. caution :- for any given number the validation checks if the number is less or equal to the given number not the length of the number."},{type:"para",string:"caution :- for any given number the validation checks if the number is less or equal to the given number not the length of the number."},{type:"title",level:2,string:"(3) Max validation parameter"},{type:"para",string:"max parameter check the string,array,number or object keys length to be equal or lower to the number given as a value to this parameter in the schema to be the same of that given in the data to be validated."},{type:"title",level:2,string:"(4) Options validation parameter"},{type:"para",string:"options parametere can only be given to the string data type and it checks if the given value in the data is present in the array provided in the schema."},{type:"title",level:2,string:"(5) elective validation parameter"},{type:"para",string:"this parametere if given as true ingnores if the data is not present in the data to be validated."}]},{type:"section",title:"Static and Dynamic validation",items:[{type:"para",string:"object might have some keys which are not compulsory for a given purpose and there validation might not be needed thus the object length validation can be skipped while calling the api"},{type:"code",string:"const validate = engine.validate.json(schema,data) //for static"},{type:"code",string:"const validate = engine.validate.json(<br>&nbsp;&nbsp;schema,<br>&nbsp;&nbsp;data,<br>&nbsp;&nbsp;'dynamic',<br>&nbsp;&nbsp;6<br>)<br>//for dynamic"},{type:"para",string:"here the first argument passed is the schema then the data which is to be validated then if the object have elective keys pass dynamic as a string and the last is the maximum length of the given data which is to be validated."}]},{type:"section",title:"Pass Case",items:[{type:"para",string:"this is the case for a dynamic object valition which will pass the validation."},{type:"code",json:{username:"akku",user_type:"admin",age:21,contacts:{email:"gzbakku@gmail.com"}}},{type:"code",json:{username:{type:"string",min:3,max:256},user_type:{type:"string",options:["admin","writer","programmer"]},age:{type:"number",min:12,max:99},mobile:{type:"number",min:4500450045,max:9998999899,elective:!0},likes:{type:"array",min:1,max:10,elective:!0},contacts:{type:"object",min:1,max:3}}},{type:"code",string:"const validate = engine.validate.json(<br>&nbsp;&nbsp;schema,<br>&nbsp;&nbsp;data,<br>&nbsp;&nbsp;'dynamic',<br>&nbsp;&nbsp;6<br>)<br>//for dynamic"}]},{type:"section",title:"Fail Case",items:[{type:"para",string:"this is the case for a dynamic object valition which will fail the validation."},{type:"code",json:{username:"akku",user_type:"actor",age:21,contacts:{email:"gzbakku@gmail.com"}}},{type:"code",json:{username:{type:"string",min:3,max:256},user_type:{type:"string",options:["admin","writer","programmer"]},age:{type:"number",min:12,max:99},mobile:{type:"number",min:4500450045,max:9998999899,elective:!0},likes:{type:"array",min:1,max:10,elective:!0},contacts:{type:"object",min:1,max:3}}},{type:"code",string:"const validate = engine.validate.json(<br>&nbsp;&nbsp;schema,<br>&nbsp;&nbsp;data,<br>&nbsp;&nbsp;'dynamic',<br>&nbsp;&nbsp;6<br>)<br>//for dynamic"},{type:"para",string:"here the validation will fail because the given user type doed not exists in the options given in the schema."}]}]},{}],2:[function(e,t,a){let n,i;const r={init:t=>{if(engine.common.tell("panel initiated",!1),null==t||null==t)return engine.common.error("parent_cont_id_not_found");i=(n=t)+"-panel-json",engine.make.init.panel(i,n,"panel"),function(){const t=e(1);engine.global.comp.articleComp.init(i,t)}()},ref:"-panel-json",type:"panel",panelName:"jsonPanel",trackers:{title:"Json - Validate Apis - Vegana Js",meta:[{name:"description",content:"introduction to vegana json validate api."},{name:"keywords",content:"validate,vegana,json,api"}]}};engine.router.set.panelModule("docsPage","validateCont","jsonPanel",r),t.exports=r},{1:1}]},{},[2]);